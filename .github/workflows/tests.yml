---
name: tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * WED,SAT' # 00:00 on Wednesdays and Saturdays, weekly.

jobs:
  up-to-date:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies via Yarn
      run: |
        rm -rf node_modules
        yarn install --frozen-lockfile

    - name: Install Dependencies via NPM
      run: |
        rm -rf node_modules
        npm ci

  fmt:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Run ESLint Check
      run: npx eslint --max-warnings 0 .

  docker-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Test Docker Build
      run: docker build -t freyrcli/freyrjs .

    - name: Build And Push
      uses: docker/build-push-action@7f9d37fa544684fb73bfe4835ed7214c255ce02b
      with:
        context: .
        file: ./Dockerfile
        tags: freyr-dev:latest
        outputs: type=docker,dest=/tmp/freyr-dev.tar

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: freyr-dev
        path: /tmp/freyr-dev.tar

  spotify:
    runs-on: ubuntu-latest

    steps:
    - run: true

  spotify-track:
    runs-on: ubuntu-latest
    needs: [ spotify, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Spotify - Download Track
      run: npm run test -- --docker freyr-dev spotify.track
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  spotify-album:
    runs-on: ubuntu-latest
    needs: [ spotify, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Spotify - Download Album
      run: npm run test -- --docker freyr-dev spotify.album
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  spotify-artist:
    runs-on: ubuntu-latest
    needs: [ spotify, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Spotify - Download Album
      run: npm run test -- --docker freyr-dev spotify.artist
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  spotify-playlist:
    runs-on: ubuntu-latest
    needs: [ spotify, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Spotify - Download Playlist
      run: npm run test -- --docker freyr-dev spotify.playlist
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  apple-music:
    runs-on: ubuntu-latest

    steps:
    - run: true

  apple-music-track:
    runs-on: ubuntu-latest
    needs: [ apple-music, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Apple Music - Download Track
      run: npm run test -- --docker freyr-dev apple_music.track
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  apple-music-album:
    runs-on: ubuntu-latest
    needs: [ apple-music, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Apple Music - Download Album
      run: npm run test -- --docker freyr-dev apple_music.album
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  apple-music-artist:
    runs-on: ubuntu-latest
    needs: [ apple-music, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Apple Music - Download Artist
      run: npm run test -- --docker freyr-dev apple_music.artist
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  apple-music-playlist:
    runs-on: ubuntu-latest
    needs: [ apple-music, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Apple Music - Download Playlist
      run: npm run test -- --docker freyr-dev apple_music.playlist
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  deezer:
    runs-on: ubuntu-latest

    steps:
    - run: true

  deezer-track:
    runs-on: ubuntu-latest
    needs: [ deezer, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Deezer - Download Track
      run: npm run test -- --docker freyr-dev deezer.track
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  deezer-album:
    runs-on: ubuntu-latest
    needs: [ deezer, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Deezer - Download Album
      run: npm run test -- --docker freyr-dev deezer.album
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  deezer-artist:
    runs-on: ubuntu-latest
    needs: [ deezer, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Deezer - Download Artist
      run: npm run test -- --docker freyr-dev deezer.artist
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root

  deezer-playlist:
    runs-on: ubuntu-latest
    needs: [ deezer, docker-build ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: freyr-dev
        path: /tmp

    - name: Load Docker Image
      run: |
        docker load --input /tmp/freyr-dev.tar
        docker image ls -a

    - name: Deezer - Download Playlist
      run: npm run test -- --docker freyr-dev deezer.playlist
      env:
        DOCKER_ARGS: -v $GITHUB_WORKSPACE/stage:/data --user root


  docker-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Check If Is PR
      id: is_pr
      run: |
        if [[ "${{ github.event_name }}" != 'pull_request' ]]; then
          echo "::set-output name=sha::type=sha,format=short,prefix="
        fi

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@e5622373a38e60fb6d795a4421e56882f2d7a681
      with:
        images: freyrcli/freyrjs-git
        tags: |
          type=ref,event=pr
          type=ref,event=branch
          ${{ steps.is_pr.outputs.sha }}

    - name: Extract Tags
      id: meta2
      if: github.event_name == 'pull_request'
      run: |
        PR_TAG=$( echo "${{ steps.meta.outputs.tags }}" | sed 's/freyrcli\/freyrjs-git://g' )
        echo "::set-output name=tag::$PR_TAG"
        SHA=$( echo ${{ github.event.pull_request.base.sha }} | head -c7 )
        echo "::set-output name=sha::$SHA"

    - name: Report Docker Image Build Status
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        message: |
          <div align=center>

          ---

          🐋 🤖

          🔃

          **A docker image for this PR is being built!**

          ```console
          docker pull freyrcli/freyrjs-git:${{steps.meta2.outputs.tag}}
          ```

          | [**Latest Master**][master-url] | [![](https://img.shields.io/docker/image-size/freyrcli/freyrjs-git/${{steps.meta2.outputs.sha}}?color=gray&label=%20&logo=docker)][master-url] |
          | - | - |

          ---

          <details>
          <summary>What's this?</summary>

          This docker image is a self-contained sandbox that includes all the patches made in this PR. Allowing others to easily use your patches without waiting for it to get merged and released officially.

          For more context, see https://github.com/miraclx/freyr-js#docker-development.

          </details>
          </div>

          [master-url]: https://hub.docker.com/r/freyrcli/freyrjs-git/tags?name=${{steps.meta2.outputs.sha}}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Log in to Docker Hub
      uses: docker/login-action@42d299face0c5c43a0487c477f595ac9cf22f1a7
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@7f9d37fa544684fb73bfe4835ed7214c255ce02b
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Report Docker Image Build Status
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        message: |
          <div align=center>

          ---

          🐋 🤖

          **A docker image for this PR has been built!**

          ```console
          docker pull freyrcli/freyrjs-git:${{steps.meta2.outputs.tag}}
          ```

          | [**Latest Master**][master-url] | [![](https://img.shields.io/docker/image-size/freyrcli/freyrjs-git/${{steps.meta2.outputs.sha}}?color=gray&label=%20&logo=docker)][master-url] |
          | - | - |
          | [**This Patch**][pr-url] | [![](https://img.shields.io/docker/image-size/freyrcli/freyrjs-git/${{steps.meta2.outputs.tag}}?color=gray&label=%20&logo=docker)][pr-url] |

          ---

          <details>
          <summary>What's this?</summary>

          This docker image is a self-contained sandbox that includes all the patches made in this PR. Allowing others to easily use your patches without waiting for it to get merged and released officially.

          For more context, see https://github.com/miraclx/freyr-js#docker-development.

          </details>
          </div>

          [master-url]: https://hub.docker.com/r/freyrcli/freyrjs-git/tags?name=${{steps.meta2.outputs.sha}}
          [pr-url]: https://hub.docker.com/r/freyrcli/freyrjs-git/tags?name=${{steps.meta2.outputs.tag}}

  linter:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        # Full git history is needed to get a proper list of changed files within `super-linter`
        fetch-depth: 0

    - name: Install Dependencies
      run: npm ci

    - name: Lint Code Base
      uses: github/super-linter@v4
      env:
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: master
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        LINTER_RULES_PATH: /
        JAVASCRIPT_ES_CONFIG_FILE: .eslintrc
        JSCPD_CONFIG_FILE: .github/linters/.jscpd.json
        VALIDATE_JAVASCRIPT_STANDARD: false
