---
name: tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * WED,SAT' # 00:00 on Wednesdays and Saturdays, weekly.

jobs:
  up-to-date:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies via Yarn
      run: |
        rm -rf node_modules
        yarn install --frozen-lockfile

    - name: Install Dependencies via NPM
      run: |
        rm -rf node_modules
        npm ci

  fmt:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: npm ci

    - name: Run ESLint Check
      run: npx eslint --max-warnings 0 .

  spotify:
    if: false
    runs-on: ubuntu-latest
    steps:
    - run: true

  spotify-track:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ spotify ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Spotify - Download Track
      run: |
        mkdir -p ./CI/spotify/track
        cd ./CI/spotify/track
        npm run test -- spotify.track

  spotify-album:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ spotify ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Spotify - Download Album
      run: |
        mkdir -p ./CI/spotify/album
        cd ./CI/spotify/album
        npm run test -- spotify.album

  spotify-artist:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ spotify ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Spotify - Download Artist
      run: |
        mkdir -p ./CI/spotify/artist
        cd ./CI/spotify/artist
        npm run test -- spotify.artist

  spotify-playlist:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ spotify ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Spotify - Download Playlist
      run: |
        mkdir -p ./CI/spotify/playlist
        cd ./CI/spotify/playlist
        npm run test -- spotify.playlist

  apple-music:
    if: false
    runs-on: ubuntu-latest
    steps:
    - run: true

  apple-music-track:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ apple-music ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Apple Music - Download Track
      run: |
        mkdir -p ./CI/apple_music/track
        cd ./CI/apple_music/track
        npm run test -- apple_music.track

  apple-music-album:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ apple-music ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Apple Music - Download Album
      run: |
        mkdir -p ./CI/apple_music/album
        cd ./CI/apple_music/album
        npm run test -- apple_music.album

  apple-music-artist:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ apple-music ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Apple Music - Download Artist
      run: |
        mkdir -p ./CI/apple_music/artist
        cd ./CI/apple_music/artist
        npm run test -- apple_music.artist

  apple-music-playlist:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ apple-music ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Apple Music - Download Playlist
      run: |
        mkdir -p ./CI/apple_music/playlist
        cd ./CI/apple_music/playlist
        npm run test -- apple_music.playlist

  deezer:
    if: false
    runs-on: ubuntu-latest
    steps:
    - run: true

  deezer-track:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ deezer ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Deezer - Download Track
      run: |
        mkdir -p ./CI/deezer/track
        cd ./CI/deezer/track
        npm run test -- deezer.track

  deezer-album:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ deezer ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Deezer - Download Album
      run: |
        mkdir -p ./CI/deezer/album
        cd ./CI/deezer/album
        npm run test -- deezer.album

  deezer-artist:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ deezer ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Deezer - Download Artist
      run: |
        mkdir -p ./CI/deezer/artist
        cd ./CI/deezer/artist
        npm run test -- deezer.artist

  deezer-playlist:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ deezer ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg atomicparsley

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Freyr
      run: npm ci && npm link

    - name: Deezer - Download Playlist
      run: |
        mkdir -p ./CI/deezer/playlist
        cd ./CI/deezer/playlist
        npm run test -- deezer.playlist


  docker-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@7f9d37fa544684fb73bfe4835ed7214c255ce02b
      with:
        context: .
        tags: freyrcli/freyrjs
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Check If Is PR
      id: is_pr
      run: |
        if [[ "${{ github.event_name }}" != 'pull_request' ]]; then
          echo "::set-output name=sha::type=sha,format=short,prefix="
        fi

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@e5622373a38e60fb6d795a4421e56882f2d7a681
      with:
        images: freyrcli/freyrjs-git
        tags: |
          type=ref,event=pr
          type=ref,event=branch
          ${{ steps.is_pr.outputs.sha }}

    - name: Extract Tags
      id: meta2
      if: github.event_name == 'pull_request'
      run: |
        PR_TAG=$( echo "${{ steps.meta.outputs.tags }}" | sed 's/freyrcli\/freyrjs-git://g' )
        echo "::set-output name=tag::$PR_TAG"
        SHA=$( echo ${{ github.event.pull_request.base.sha }} | head -c7 )
        echo "::set-output name=sha::$SHA"

    - name: Report Docker Image Build Status
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        message: |
          <div align=center>

          ---

          🐋 🤖

          🔃

          **A docker image for this PR is being built!**

          ```console
          docker pull freyrcli/freyrjs-git:${{steps.meta2.outputs.tag}}
          ```

          | [**Latest Master**][master-url] | [![](https://img.shields.io/docker/image-size/freyrcli/freyrjs-git/${{steps.meta2.outputs.sha}}?color=gray&label=%20&logo=docker)][master-url] |
          | - | - |

          ---

          <details>
          <summary>What's this?</summary>

          This docker image is a self-contained sandbox that includes all the patches made in this PR. Allowing others to easily use your patches without waiting for it to get merged and released officially.

          For more context, see https://github.com/miraclx/freyr-js#docker-development.

          </details>
          </div>

          [master-url]: https://hub.docker.com/r/freyrcli/freyrjs-git/tags?name=${{steps.meta2.outputs.sha}}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

    - name: Log in to Docker Hub
      uses: docker/login-action@42d299face0c5c43a0487c477f595ac9cf22f1a7
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@7f9d37fa544684fb73bfe4835ed7214c255ce02b
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Report Docker Image Build Status
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        message: |
          <div align=center>

          ---

          🐋 🤖

          **A docker image for this PR has been built!**

          ```console
          docker pull freyrcli/freyrjs-git:${{steps.meta2.outputs.tag}}
          ```

          | [**Latest Master**][master-url] | [![](https://img.shields.io/docker/image-size/freyrcli/freyrjs-git/${{steps.meta2.outputs.sha}}?color=gray&label=%20&logo=docker)][master-url] |
          | - | - |
          | [**This Patch**][pr-url] | [![](https://img.shields.io/docker/image-size/freyrcli/freyrjs-git/${{steps.meta2.outputs.tag}}?color=gray&label=%20&logo=docker)][pr-url] |

          ---

          <details>
          <summary>What's this?</summary>

          This docker image is a self-contained sandbox that includes all the patches made in this PR. Allowing others to easily use your patches without waiting for it to get merged and released officially.

          For more context, see https://github.com/miraclx/freyr-js#docker-development.

          </details>
          </div>

          [master-url]: https://hub.docker.com/r/freyrcli/freyrjs-git/tags?name=${{steps.meta2.outputs.sha}}
          [pr-url]: https://hub.docker.com/r/freyrcli/freyrjs-git/tags?name=${{steps.meta2.outputs.tag}}

  linter:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        # Full git history is needed to get a proper list of changed files within `super-linter`
        fetch-depth: 0

    - name: Install Dependencies
      run: npm ci

    - name: Lint Code Base
      uses: github/super-linter@v4
      env:
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: master
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        LINTER_RULES_PATH: /
        JAVASCRIPT_ES_CONFIG_FILE: .eslintrc
        JSCPD_CONFIG_FILE: .github/linters/.jscpd.json
        VALIDATE_JAVASCRIPT_STANDARD: false
