name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg ripgrep atomicparsley

    - name: Install freyr
      run: npm install && npm link

    - name: Prep Testing Stage
      run: |
        mkdir -p ./CI/{spotify,apple_music,deezer}/{track,album,artist,playlist}

        cat << EOF > ./CI/prep.sh
          freyr() {
            echo "::group::[\$attempts/3] Downloading..."
            script -qfc "freyr \$@" /dev/null | tee .freyr_log
            echo "::endgroup::"
          }

          exec_retry() {
            cmd="\$(cat)" && attempts=1
            until eval "\$cmd"; do
              echo "::endgroup::"
              if (( attempts < 3 )); then
                echo "::warning::[\$attempts/3] Download failed, retrying.."
                : \$(( attempts += 1 ))
              else
                echo "::error::[\$attempts/3] Download failed."
                return 1
              fi
            done
            echo "::endgroup::"
            echo "::group::View Files"
            tree -sh
            echo "::endgroup::"
          }

          RG_SRC="\$(which rg)"
          rg() {
            echo "rg: pattern: [\$@]" > /dev/stderr
            \$RG_SRC --fixed-strings --passthru "\$@"
            if [[ \$? != 0 ]]; then
              echo "::error::rg: failed to match" > /dev/stderr
              return 1
            fi
          }

          validate() {
            echo "::group::[\$attempts/3] Verifying..."
            res=\$(cat .freyr_log | rg "[•] Collation Complete")
            for arg in "\$@"; do
              res=\$(echo "\$res" | rg "\$arg")
            done > /dev/null
          }
        EOF

    - name: Spotify - Download Track
      run: |
        . ./CI/prep.sh && cd ./CI/spotify/track

        exec_retry << EOF
          freyr https://open.spotify.com/track/5FNS5Vj69AhRGJWjhrAd01
          validate \
            "[•] Total tracks: [01]" \
            "✕ Failed:  [00]"
        EOF

    - name: Spotify - Download Album
      run: |
        . ./CI/prep.sh && cd ./CI/spotify/album

        exec_retry << EOF
          freyr https://open.spotify.com/album/2D23kwwoy2JpZVuJwzE42B
          validate \
            "[•] Total tracks: [04]" \
            "✕ Failed:  [00]"
        EOF

    # - name: Spotify - Download Artist
    # - name: Spotify - Download Playlist

    - name: Apple Music - Download Track
      run: |
        . ./CI/prep.sh && cd ./CI/apple_music/track

        exec_retry << EOF
          freyr https://music.apple.com/us/album/elio-irl/1547735824?i=1547736100
          validate \
            "[•] Total tracks: [01]" \
            "✕ Failed:  [00]"
        EOF

    - name: Apple Music - Download Album
      run: |
        . ./CI/prep.sh && cd ./CI/apple_music/album

        exec_retry << EOF
          freyr https://music.apple.com/us/album/im-sorry-im-not-sorry-ep/1491795443
          validate \
            "[•] Total tracks: [04]" \
            "✕ Failed:  [00]"
        EOF

    # - name: Apple Music - Download Artist
    # - name: Apple Music - Download Playlist

    - name: Deezer - Download Track
      run: |
        . ./CI/prep.sh && cd ./CI/deezer/track

        exec_retry << EOF
          freyr https://www.deezer.com/en/track/1189202982
          validate \
            "[•] Total tracks: [01]" \
            "✕ Failed:  [00]"
        EOF

    - name: Deezer - Download Album
      run: |
        . ./CI/prep.sh && cd ./CI/deezer/album

        exec_retry << EOF
          freyr https://www.deezer.com/en/album/123330212
          validate \
            "[•] Total tracks: [04]" \
            "✕ Failed:  [00]"
        EOF

    # - name: Deezer - Download Artist
    # - name: Deezer - Download Playlist

  docker_build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Build
      run: docker build -t freyrcli/freyrjs .
